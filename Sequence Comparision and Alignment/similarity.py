G = -2	#Penalty for spaces in sequence alignment
SIZE = 100

#Score based on equality of string characters
def p(a,b):
	if a==b:
		return 1
	else:
		return -1

#2-D array to store similarity scores generated by similarity function
sim = [[0 for x in range(SIZE)] for y in range(SIZE)]

#Assign score based on the similarity between 2 sequences
def similarity(s,t):
	m = len(s)
	n = len(t)
	for i in range(m+1):
		sim[i][0] = i*G
	for j in range(n+1):
		sim[0][j] = j*G
	for i in range(1,m+1):
		for j in range(1,n+1):
			sim[i][j] = max((sim[i-1][j]+G), (sim[i-1][j-1]+p(s[i-1],t[j-1])), (sim[i][j-1]+G))
	return sim[m][n]


	
#Sample program to test the functions
print("Enter 1st Sequence:", end=" ")
s = input()
print("Enter 2nd sequnce:", end=" ")
t = input()
print("Similiarity score is",similarity(s,t))
print("Similarity Matrix - ")
for i in range(len(s)+1):
	for j in range(len(t)+1):
		print(sim[i][j], end= "\t")
	print("")

	
'''
***********************************************Output*************************************************
Enter 1st Sequence: CGATCGAGCAATCG
Enter 2nd sequnce: CGATGAGCATCA
Similiarity score is 6
Similarity Matrix -
0	-2	-4	-6	-8	-10	-12	-14	-16	-18	-20	-22	-24	
-2	1	-1	-3	-5	-7	-9	-11	-13	-15	-17	-19	-21	
-4	-1	2	0	-2	-4	-6	-8	-10	-12	-14	-16	-18	
-6	-3	0	3	1	-1	-3	-5	-7	-9	-11	-13	-15	
-8	-5	-2	1	4	2	0	-2	-4	-6	-8	-10	-12	
-10	-7	-4	-1	2	3	1	-1	-1	-3	-5	-7	-9	
-12	-9	-6	-3	0	3	2	2	0	-2	-4	-6	-8	
-14	-11	-8	-5	-2	1	4	2	1	1	-1	-3	-5	
-16	-13	-10	-7	-4	-1	2	5	3	1	0	-2	-4	
-18	-15	-12	-9	-6	-3	0	3	6	4	2	1	-1	
-20	-17	-14	-11	-8	-5	-2	1	4	7	5	3	2	
-22	-19	-16	-13	-10	-7	-4	-1	2	5	6	4	4	
-24	-21	-18	-15	-12	-9	-6	-3	0	3	6	5	3	
-26	-23	-20	-17	-14	-11	-8	-5	-2	1	4	7	5	
-28	-25	-22	-19	-16	-13	-10	-7	-4	-1	2	5	6	

*************************************************Scoring************************************************
CGATCGAGCAATCG
CGAT_GAGC_ATCA
Score is 1+1+1+1-2+1+1+1+1-2+1+1+1-1 = 6
********************************************************************************************************
'''

