G = -2	#Penalty for spaces in sequence alignment
SIZE = 100

#Score based on equality of string characters
def p(a,b):
	if a==b:
		return 1
	else:
		return -1

#2-D array to store similarity scores generated by similarity function
sim = [[0 for x in range(SIZE)] for y in range(SIZE)]

#Assign score based on the similarity between 2 sequences
def similarity(s,t):
	m = len(s)
	n = len(t)
	for i in range(m+1):
		sim[i][0] = i*G
	for j in range(n+1):
		sim[0][j] = j*G
	for i in range(1,m+1):
		for j in range(1,n+1):
			sim[i][j] = max((sim[i-1][j]+G), (sim[i-1][j-1]+p(s[i-1],t[j-1])), (sim[i][j-1]+G))
	return sim[m][n]


	
#Sample program to test the functions
print("Enter 1st Sequence:", end=" ")
s = input()
print("Enter 2nd sequnce:", end=" ")
t = input()
print("Similiarity score is",similarity(s,t))

'''
************Output************
Enter 1st Sequence: CGACA
Enter 2nd sequnce: CGCA
Similiarity score is  2

***********Scoring************
CGACA
CG_CA
Score is 1+1-2+1+1 = 2
'''

